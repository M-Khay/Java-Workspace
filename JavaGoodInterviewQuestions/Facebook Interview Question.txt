/*
$ svn bisect good_rev bad_rev
>> Returns the revision that introduced the bug
  
Example:

revision 100 <-- good
revision 101
...
revision ??? <-- introduced the bug
...
revision 199  
revision 200 <-- bad

bool test(revision); // Returns true if tests pass for the specified revision

1 -> good
2 -> good
3 -> bad
4 -> bad
5 -> bad
*/

int getBad(int good, int bad) throws StackOverflowException {
  
  
  if(bad - good == 1){
   return  bad;
  }
  
  int mid  = (int)(( good + bad )/2);
  
  if(test(mid)){
    getBad(mid,bad);
  }else {
    getBad(good,mid);
  }

}

int getBad(int good, int bad) {

  while (bad - good != 1){
    
  int mid  = (int)(( good + bad )/2);
  
    if(test(mid)){
     good = mid;  
    }else{
     bad = mid; 
    }
    
    
  }
  
  return bad;
}



// 100, 200 ==> 150 ; 150 ,200 --> 175 ;

// Stocks
// [1, 2, 10, 11, 3, 7] = 21

// max =11;

// max = 7
 // [1,2,3,7,10,11]  

// complexity = n + nlngn 
int maxProfit(int[] prices) {

  int max =0;
  int profit =0;

  for(int i = prices.length-1; i>= 0 ; i--){
//     condition when  i = 0. 
    if( prices[i] > prices[i-1]){
      // profit = prices[i] - prices [i-1];
      max = prices[i];
    }else if(max < prices[i-1]){
       max = prices[i-1];
    
    }
    
  }
  
    
  }  
  

 
 ]\["l;./"]
}
  
}


